#include <Arduino.h>
#include "Wire.h"
#include "EBYTE.h"
#include <Adafruit_BNO055.h>
#include "Adafruit_Sensor.h"
#include <utility/imumaths.h>
#include "TinyGPS.h"
#include <SoftwareSerial.h>
#include "tinySHT2x.h"
#include <TinyGPS++.h>
#include <WiFi.h>
#include <PubSubClient.h>

/*
WARNING: IF USING AN ESP32
DO NOT USE THE PIN NUMBERS PRINTED ON THE BOARD
YOU MUST USE THE ACTUAL GPIO NUMBER
*/
#define PIN_RX 16   // Serial2 RX (connect this to the EBYTE Tx pin)
#define PIN_TX 17   // Serial2 TX pin (connect this to the EBYTE Rx pin)

#define PIN_M0 4    // D4 on the board (possibly pin 24)
#define PIN_M1 22   // D2 on the board (possibly called pin 22)
#define PIN_AX 21   // D15 on the board (possibly called pin 21)

#define PIN_SOLENOID 26
#define PIN_POMPA 27

//Aktivasi Sensor
#define BNO055_SENSOR true
#define SHT20_SENSOR false
#define Soil_SENSOR false
#define GPS_SENSOR false
#define MPX_SENSOR true
#define BATTERY false

#define EBYTE_COMMUNICATION false

bool parsing = false;
String sData, data[2];

int JAM, MENIT;

// ===========MQTT Test
const char* ssid = "Sticker";
const char* password = "terserah";
WiFiClient espClient;
const char* mqtt_server = "broker.hivemq.com";
const char* mqtt_topic = "brin/athus01";
PubSubClient client(espClient);
String message = "";
wl_status_t wifiStatus;


//Battery ====================================================================================================
// Define analog input 
#define ANALOG_IN_PIN 12   
// Floats for ADC voltage & Input voltage 
float adc_voltage = 0.0; 
float in_voltage = 0.0;   
// Floats for resistor values in divider (in ohms) 
const float R1 = 5100.0;  // Resistor R1 (10K)
const float R2 = 1200.0;  // Resistor R2 (330 ohm)   
// Float for Reference Voltage 
float ref_voltage = 3.124;   
// Integer for ADC value 
int adc_value = 0; 

//Sensor BNO055===============================================================================================
/* Set the delay between fresh samples */
uint16_t BNO055_SAMPLERATE_DELAY_MS = 100;

// Check I2C device address and correct line below (by default address is 0x29 or 0x28)
//                                   id, address
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28, &Wire);


//SHT20 Sensor================================================================================================
tinySHT2x sht;
float temp, humd;

//Sensor Soil=================================================================================================
const int AirValue = 570;   //you need to change this value that you had recorded in the air
const int WaterValue = 0;  //you need to change this value that you had recorded in the water

int intervals = (AirValue - WaterValue)/3;
int soilMoistureValue = 0;

char categori_soil;

int cur_sample = 0;

//MPX Sensor==================================================================================================
const float ADC_mV = 4.8828125;       // convesion multiplier from Arduino ADC value to voltage in mV
const float SensorOffset = 336.0;     // in mV taken from datasheet
const float sensitivity = 4.413;      // in mV/mmH2O taken from datasheet
const float mmh2O_cmH2O = 10;         // divide by this figure to convert mmH2O to cmH2O
const float mmh2O_kpa = 0.00981;      // convesion multiplier from mmH2O to kPa

const int sensorPin = 25; // Pin analog sensor
const float referenceVoltage = 5.0; // Tegangan referensi pada Arduino (dalam volt)
const float sensorSensitivity = 0.2; // Sensitivitas sensor (dalam volt/kPa)
const float waterDensity = 1000; // Kerapatan air (dalam kg/m^3)
const float gravity = 9.81; // Percepatan gravitasi (dalam m/s^2)
const float fluidHeight = 0.5; // Ketinggian fluida pada dasar selang (dalam meter)
const float calibrationOffset = 146.17;
const float hoseLength = 0.97;

float ketinggian_sebenarnya;

#define window_size 20
int window[window_size] = {0};

#define window_size_B 10
int window_B[window_size_B] = {0};

float h;

//GPS Sensor==================================================================================================
static const int RXPin = 5, TXPin = 4;
static const uint32_t GPSBaud = 9600;

float flat = 0.0000000; 
float flon = 0.0000000;
unsigned long age;

TinyGPS gps;
SoftwareSerial gpsSerial(RXPin, TXPin);

bool newData = false;
unsigned long chars;
unsigned short sentences, failed;
//Ebyte Lora==================================================================================================
// i recommend putting this code in a .h file and including it
// from both the receiver and sender modules
HardwareSerial SerialAT(2);
struct DATA {
  // unsigned long Count;
  // int Bits;
  // float Volts;
  // float Amps;
  int sensor_soil;
  // char soil_info;
  float sensor_SHT20_temp;
  float sensor_SHT20_hum;
  float latitude;
  float longitud;
  float sensor_MPX;
  float Acc_X;
  float Acc_Y;
  float Acc_Z;
  float Gyro_X;
  float Gyro_Y;
  float Gyro_Z;
  float Orientasi_X;
  float Orientasi_Y;
  // float Orientasi_Z;
  float Battery;
};

// these are just dummy variables, replace with your own
// int Chan;
DATA MyData;
// unsigned long Last;
// create the transceiver object, passing in the serial and pins
// EBYTE Transceiver(&Serial2, PIN_M0, PIN_M1, PIN_AX);
//============================================================================================================
void push(int val){
  int i=0;
  for (i=0;i<window_size;i++){
    window[i-1]=window[i];
  }
  window[window_size-1]=val;
}

int take_avg(){
  long sum=0;
  int i=0;
  for (i=0;i<window_size;i++){
    sum+=window[i];
  }
  return sum/window_size;
}

void adc_baterai_Lion(int val){
  int j=0;
  for (j=0;j<window_size_B;j++){
    window_B[j-1]=window_B[j];
  }
  window_B[window_size_B-1]=val;
}

int baterai_avg(){
  long jumlah=0;
  int i=0;
  for (i=0;i<window_size_B;i++){
    jumlah+=window_B[i];
  }
  return jumlah/window_size_B;
}

void send_data(float data1, float data2,float data3, float data4, float data5, float data6, float data7, float data8, float data9, float data10, float data11, float data12, float data13, float data14, float data15){
  String string_data;
  string_data = '#';
  string_data += data1;
  string_data += '*';
  string_data += data2;
  string_data += '*';
  string_data += data3;
  string_data += '*';
  string_data += data4;
  string_data += '*';
  string_data += data5;
  string_data += '*';
  string_data += data6;
  string_data += '*';
  string_data += data7;
  string_data += '*';
  string_data += data8;
  string_data += '*';
  string_data += data9;
  string_data += '*';
  string_data += data10;
  string_data += '*';
  string_data += data11;
  string_data += '*';
  string_data += data12;
  string_data += '*';
  string_data += data13;
  string_data += '*';
  string_data += data14;
  string_data += '*';
  string_data += data15;
  string_data += '*';
  string_data += '@';
  SerialAT.println(string_data);
}

void printEvent(sensors_event_t* event) {
  double x = -1000000, y = -1000000 , z = -1000000; //dumb values, easy to spot problem
  // if (event->type == SENSOR_TYPE_ACCELEROMETER) {
  //   Serial.print("Accl:");
  //   x = event->acceleration.x;
  //   y = event->acceleration.y;
  //   z = event->acceleration.z;
  // }
  // else if (event->type == SENSOR_TYPE_ORIENTATION) {
  //   Serial.print("Orient:");
  //   x = event->orientation.x;
  //   y = event->orientation.y;
  //   z = event->orientation.z;
  // }
  // else if (event->type == SENSOR_TYPE_MAGNETIC_FIELD) {
  //   Serial.print("Mag:");
  //   x = event->magnetic.x;
  //   y = event->magnetic.y;
  //   z = event->magnetic.z;
  // }
  // else if (event->type == SENSOR_TYPE_GYROSCOPE) {
  //   Serial.print("Gyro:");
  //   x = event->gyro.x;
  //   y = event->gyro.y;
  //   z = event->gyro.z;
  // }
  // else if (event->type == SENSOR_TYPE_ROTATION_VECTOR) {
  //   Serial.print("Rot:");
  //   x = event->gyro.x;
  //   y = event->gyro.y;
  //   z = event->gyro.z;
  // }
  // else if (event->type == SENSOR_TYPE_LINEAR_ACCELERATION) {
  //   Serial.print("Linear:");
  //   x = event->acceleration.x;
  //   y = event->acceleration.y;
  //   z = event->acceleration.z;
  // }
  // else if (event->type == SENSOR_TYPE_GRAVITY) {
  //   Serial.print("Gravity:");
  //   x = event->acceleration.x;
  //   y = event->acceleration.y;
  //   z = event->acceleration.z;
  // }
  // else {
  //   Serial.print("Unk:");
  // }

  // Serial.print("\tx= ");
  // Serial.print(x);
  // Serial.print(" |\ty= ");
  // Serial.print(y);
  // Serial.print(" |\tz= ");
  // Serial.println(z);
}

void reconnect() 
{
  while (!client.connected()) 
  {
    Serial.println("Connecting to MQTT broker...");
    if (client.connect("ESP32Client")) 
    {
      Serial.println("Connected to MQTT broker");
    } else 
    {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.print(client.state());
      Serial.println(" retrying in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(9600); //print data sensor
  gpsSerial.begin(GPSBaud); // GPS
  // Serial2.begin(9600); //Ebyte Lora
  SerialAT.begin(9600,SERIAL_8N1,16,17);

  pinMode(PIN_SOLENOID, OUTPUT);
  pinMode(PIN_POMPA, OUTPUT);

  //BNO055 Sensor=============================================================================================
#ifdef BNO055_SENSOR
  while (!Serial) delay(10);  // wait for serial port to open!

  Serial.println("Orientation Sensor Test"); Serial.println("");

  /* Initialise the sensor */
  if (!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while (1);
  }

  delay(1000);
#endif

  //SHT20 Sensor==============================================================================================
#ifdef SHT20_SENSOR 
  sht.begin();
#endif

  //Ebyte Lora================================================================================================
#ifdef EBYTE_COMMUNICATION
  Serial.println("Starting Reader");
  // this init will set the pinModes for you
  // Serial.println(Transceiver.init());

  // all these calls are optional but shown to give examples of what you can do
  // Serial.println(Transceiver.GetAirDataRate());
  // Serial.println(Transceiver.GetChannel());
  // Transceiver.SetAddressH(1);
  // Transceiver.SetAddressL(1);
  // Chan = 15;
  // Transceiver.SetChannel(Chan);
  // save the parameters to the unit,
  // Transceiver.SaveParameters(PERMANENT);

  // you can print all parameters and is good for debugging
  // if your units will not communicate, print the parameters
  // for both sender and receiver and make sure air rates, channel
  // and address is the same
  // Transceiver.PrintParameters();
#endif

wifiStatus = WiFi.begin(ssid, password);
  while (wifiStatus != WL_CONNECTED) 
  {
    Serial.println("Connecting to WiFi...");
    delay(500);
  }
  Serial.println("Connected to WiFi network");
  
  // connect to mqtt broker
  client.setServer(mqtt_server, 1883);  // port : 1883
}

void loop() {

  if (SerialAT.available()) {
    sData = SerialAT.readStringUntil('@');
    Serial.println(sData);
    int q = 0;
    String tempData;
    bool parsing = false; // Menandakan bahwa proses parsing sedang berlangsung
    for (int i = 0; i < sData.length(); i++) {
      if (sData[i] == '#') {
        parsing = true;
        tempData = "";
      } else if (sData[i] == '*') {
        if (parsing) {
          data[q] = tempData;
          // Serial.print("ini data yang masuk:   ");
          // Serial.println(data[q]);
          tempData = "";
          q++;
        }
      } else {
        if (parsing) {
          tempData += sData[i];
        }
      }
    }
    JAM = data[0].toInt();
    MENIT = data[1].toInt();
  }
  //BNO055 Sensor================================================================================================
#ifdef BNO055_SENSOR  
  //could add VECTOR_ACCELEROMETER, VECTOR_MAGNETOMETER,VECTOR_GRAVITY...
  sensors_event_t orientationData , angVelocityData , linearAccelData, magnetometerData, accelerometerData, gravityData;
  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
  bno.getEvent(&angVelocityData, Adafruit_BNO055::VECTOR_GYROSCOPE);
  bno.getEvent(&linearAccelData, Adafruit_BNO055::VECTOR_LINEARACCEL);
  bno.getEvent(&magnetometerData, Adafruit_BNO055::VECTOR_MAGNETOMETER);
  bno.getEvent(&accelerometerData, Adafruit_BNO055::VECTOR_ACCELEROMETER);
  bno.getEvent(&gravityData, Adafruit_BNO055::VECTOR_GRAVITY);

  printEvent(&orientationData);
  printEvent(&angVelocityData);
  printEvent(&linearAccelData);
  printEvent(&magnetometerData);
  printEvent(&accelerometerData);
  printEvent(&gravityData);

  int8_t boardTemp = bno.getTemp();
  // Serial.println();
  // Serial.print(F("temperature: "));
  // Serial.println(boardTemp);

  uint8_t system, gyro, accel, mag = 0;
  bno.getCalibration(&system, &gyro, &accel, &mag);
  // Serial.println();
  // Serial.print("Calibration: Sys=");
  // Serial.print(system);
  // Serial.print(" Gyro=");
  // Serial.print(gyro);
  // Serial.print(" Accel=");
  // Serial.print(accel);
  // Serial.print(" Mag=");
  // Serial.println(mag);

  // Serial.println("--");
  delay(BNO055_SAMPLERATE_DELAY_MS);
#endif

  //SHT20 Sensor=================================================================================================
#ifdef SHT20_SENSOR
  /**
   * Read the measured data of air humidity
   * Return the measured air humidity data of float type, unit: %
   */
  humd = sht.getHumidity();

  /**
   * Read the measured temp data
   * Return the measured temp data of float type, unit: C
   */
  temp = sht.getTemperature();

  // Serial.print(", Temperature:");
  // Serial.print(temp, 2);   // Only print one decimal place
  // Serial.print("C");
  // Serial.print(", Humidity:");
  // Serial.print(humd, 2);   // Only print one decimal place
#endif

  //GPS==========================================================================================================
#ifdef GPS_SENSOR
  // For one second we parse GPS data and report some key values
  for (unsigned long start = millis(); millis() - start < 100;)
  {
    while (gpsSerial.available())
    {
      char c = gpsSerial.read();
      // Serial.write(c); // uncomment this line if you want to see the GPS data flowing
      if (gps.encode(c)) // Did a new valid sentence come in?
        newData = true;
    }
  }

  if (newData)
  {
    gps.f_get_position(&flat, &flon, &age);
    // Serial.print(", LAT=");
    // Serial.print(flat == TinyGPS::GPS_INVALID_F_ANGLE ? 00000000 : flat, 7);
    // Serial.print(", LON=");
    // Serial.print(flon == TinyGPS::GPS_INVALID_F_ANGLE ? 00000000 : flon, 7);
    // Serial.print(", SAT=");
    // Serial.print(gps.satellites() == TinyGPS::GPS_INVALID_SATELLITES ? 0 : gps.satellites());
    // Serial.print(", PREC=");
    // Serial.print(gps.hdop() == TinyGPS::GPS_INVALID_HDOP ? 0 : gps.hdop());
  }
#endif

  //Soil Sensor==================================================================================================
#ifdef Soil_SENSOR
  soilMoistureValue = analogRead(33);  //put Sensor insert into soil
  // if(soilMoistureValue > WaterValue && soilMoistureValue < (WaterValue + intervals))
  // {
  //     Serial.println("Very Wet");
  //     categori_soil = 'Very Wet';
  // }
  // else if(soilMoistureValue > (WaterValue + intervals) && soilMoistureValue < (AirValue - intervals))
  // {
  //     Serial.println("Wet");
  //     categori_soil = 'Wet';
  // }
  // else if(soilMoistureValue < AirValue && soilMoistureValue > (AirValue - intervals))
  // {
  //     Serial.println("Dry");
  //     categori_soil = 'Dry';
  // }
#endif

  //MPX Sensor===================================================================================================
#ifdef MPX_SENSOR
  // // ((sensorValue in mV -sensorOffset)/sensitivity in mV/mmH2O)*kPa conversion constant
  // //float sensorValue = ((analogRead(A0) * ADC_mV - SensorOffset) / sensitivity * mmh2O_kpa);     // result in kPa
  // float sensorValue = (analogRead(25) * ADC_mV - SensorOffset) / sensitivity / mmh2O_cmH2O;       // result in cmH2O
  // Serial.println(sensorValue, 2);
  // // using serial print format above, you can copy your data from the terminal,
  // // paste it into NotePad app, than save as a .CSV file which can be opened in Excel

  // int sensorValue = analogRead(25);
  
  // Serial.print("depth ");
  // Serial.print(h);
  // Serial.println(" cm");
  cur_sample = analogRead(25);
  delayMicroseconds(300);
  push(cur_sample);
  h = ((take_avg()-48.0403278832)/7.6673168807);
  float sensorValue = ((take_avg()- SensorOffset) * ADC_mV) / sensitivity / mmh2O_cmH2O; 
  
  float voltage = take_avg() * (referenceVoltage / 1023.0); // Konversi nilai analog menjadi tegangan (volt)
  float pressure = (voltage - (referenceVoltage / 2)) / sensorSensitivity; // Konversi tegangan menjadi tekanan (kPa)
  float waterLevel = (pressure * 1000) / (waterDensity * gravity) + fluidHeight - (calibrationOffset / 100.0) - hoseLength; // Konversi tekanan menjadi tinggi air (meter) dengan offset kalibrasi dan panjang selang
  float tinggiair = waterLevel*100 + 197.03;

  // float ketinggian = (0.0317*take_avg())-0.9412; //penggaris
  float ketinggian = (0.2829*take_avg())-9.9141; //hasil 8/6/2023 
  // float ketinggian = (0.25*take_avg())-9.25;
  ketinggian_sebenarnya = ketinggian + 1;

  // Serial.print("Tinggi Air (cm): ");
  // Serial.println(ketinggian_sebenarnya); // Konversi tinggi air menjadi sentimeter

#endif
  //Battery======================================================================================================
  adc_value = analogRead(ANALOG_IN_PIN);  
  adc_baterai_Lion(adc_value);
// Determine voltage at ADC input    
  adc_voltage  = (baterai_avg() * ref_voltage) / 4025;         
  // Calculate voltage at divider input    
  in_voltage = adc_voltage / (R2/(R1+R2)) ; 
  //Ebyte Lora===================================================================================================
#ifdef EBYTE_COMMUNICATION
  // measure some data and save to the structure
  // MyData.Count++;
  // MyData.Bits = analogRead(A0);
  // MyData.Volts = MyData.Bits * ( 5.0 / 1024.0 );

  // i highly suggest you send data using structures and not
  // a parsed data--i've always had a hard time getting reliable data using
  // a parsing method
  MyData.latitude = flat;
  MyData.longitud = flon;
  MyData.sensor_SHT20_hum = humd;
  MyData.sensor_SHT20_temp = temp; 
  MyData.sensor_soil = soilMoistureValue;
  // MyData.soil_info = 1001;
  MyData.sensor_MPX = ketinggian_sebenarnya;
  // MyData.Acc_X = linearAccelData.acceleration.x;
  // MyData.Acc_Y = linearAccelData.acceleration.y;
  // MyData.Acc_Z = linearAccelData.acceleration.z;
  // MyData.Gyro_X = angVelocityData.gyro.x;
  // MyData.Gyro_Y = angVelocityData.gyro.y;
  // MyData.Gyro_Z = angVelocityData.gyro.z;
  // MyData.Orientasi_X = orientationData.orientation.x;
  // MyData.Orientasi_Y = orientationData.orientation.y;
  MyData.Battery = in_voltage;
  // MyData.Orientasi_Z = orientationData.orientation.z;
  
  // Transceiver.SendStruct(&MyData, sizeof(MyData));

    // note, you only really need this library to program these EBYTE units
    // you can call write directly on the EBYTE Serial object
    // Serial2.write((uint8_t*) &Data, PacketSize );

  // SerialAT.print("#");
  // SerialAT.print(MyData.sensor_soil);
  // SerialAT.print("*");
  // // Serial.print("Humidity Soil: "); Serial.println(MyData.soil_info);
  // SerialAT.print(MyData.sensor_SHT20_temp);
  // SerialAT.print("*");
  // SerialAT.print(MyData.sensor_SHT20_hum);
  // SerialAT.print("*");
  // SerialAT.print(MyData.latitude);
  // SerialAT.print("*");
  // SerialAT.print(MyData.longitud);
  // SerialAT.print("*");
  // SerialAT.print(MyData.sensor_MPX);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Acc_X);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Acc_Y);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Acc_Z);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Gyro_X);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Gyro_Y);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Gyro_Z);
  // SerialAT.print("*");
  // SerialAT.print(MyData.Orientasi_X);
  // SerialAT.print("*");
  // SerialAT.println(MyData.Orientasi_Y);

  // let the use know something was sent
  Serial.println(" ----> Sending");
  Serial.print("Sensor Soil value: "); Serial.println(MyData.sensor_soil);
  // Serial.print("Humidity Soil: "); Serial.println(MyData.soil_info);
  Serial.print("Temperature SHT20: "); Serial.println(MyData.sensor_SHT20_temp);
  Serial.print("Humidity SHT20: "); Serial.println(MyData.sensor_SHT20_hum);
  Serial.print("Latitude: "); Serial.println(MyData.latitude,7);
  Serial.print("Longitud: "); Serial.println(MyData.longitud,7);
  Serial.print("Water level: "); Serial.println(MyData.sensor_MPX);
  Serial.print("Acc X: "); Serial.println(MyData.Acc_X);
  Serial.print("Acc Y: "); Serial.println(MyData.Acc_Y);
  Serial.print("Acc Z: "); Serial.println(MyData.Acc_Z);
  Serial.print("Gyro X: "); Serial.println(MyData.Gyro_X);
  Serial.print("Gyro Y: "); Serial.println(MyData.Gyro_Y);
  Serial.print("Gyro Z: "); Serial.println(MyData.Gyro_Z);
  Serial.print("Orientation X: "); Serial.println(MyData.Orientasi_X);
  Serial.print("Orientation Y: "); Serial.println(MyData.Orientasi_Y);
  // Serial.print("Orientation Z: "); Serial.println(MyData.Orientasi_Z);
  Serial.print("Battery: "); Serial.println(in_voltage);
  Serial.print("Time: "), Serial.print(JAM), Serial.print(":"), Serial.println(MENIT);
  Serial.println(" ");
#endif

  Serial.println();

  send_data(MyData.sensor_soil, MyData.sensor_SHT20_temp, MyData.sensor_SHT20_hum, MyData.latitude, MyData.longitud, MyData.sensor_MPX, MyData.Acc_X, MyData.Acc_Y, MyData.Acc_Z, MyData.Gyro_X, MyData.Gyro_Y, MyData.Gyro_Z, MyData.Orientasi_X, MyData.Orientasi_Y, MyData.Battery);
  if (!client.connected()) 
  {
    reconnect();
  }
  client.publish(mqtt_topic, message.c_str());
  if (JAM = 7)
  {
    analogWrite(PIN_POMPA, 100);
    digitalWrite(PIN_SOLENOID, HIGH);
  } 
  else if (ketinggian_sebenarnya <=0)
  {
    analogWrite(PIN_POMPA, 0);
    digitalWrite(PIN_SOLENOID, LOW);
  }
  
  delay(5000);
}

// #include "HardwareSerial.h"

// HardwareSerial SerialAT(1);
// #define KNOB 4
// int readVal;

// void setup() {  
//   SerialAT.begin(9600,SERIAL_8N1,16,17);
// }

// void loop() {  
//   readVal = 666;
//   SerialAT.println(readVal);
//   delay(500);   
// }

// int solenoidPin = 26; //This is the output pin on the Arduino we are using
// int pompaPin = 27; //This is the output pin on the Arduino we are using

// void setup() {
// // put your setup code here, to run once:
// pinMode(solenoidPin, OUTPUT); //Sets the pin as an output
// pinMode(pompaPin, OUTPUT); //Sets the pin as an output
// }

// void loop() {
// // put your main code here, to run repeatedly:
// digitalWrite(solenoidPin, HIGH); //Switch Solenoid ON
// digitalWrite(pompaPin, HIGH); //Switch Solenoid ON
// delay(1000); //Wait 1 Second
// digitalWrite(solenoidPin, LOW); //Switch Solenoid OFF
// digitalWrite(pompaPin, LOW); //Switch Solenoid OFF
// delay(1000); //Wait 1 Second
// }